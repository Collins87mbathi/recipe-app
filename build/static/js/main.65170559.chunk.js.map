{"version":3,"sources":["Recipe.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","menu","setMenu","search","setSearch","query","setQuery","getRequest","a","fetch","response","json","data","hits","useEffect","onSubmit","e","preventDefault","type","value","onChange","target","label","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","module","exports"],"mappings":"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","file":"static/js/main.65170559.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\nconst Recipe = ({title , calories,image,ingredients}) => {\r\n    return (\r\n        <div className={style.recipe}>\r\n           <h1>{title}</h1>\r\n           <ol>\r\n               {ingredients.map((ingredient)=> {\r\n                return <li>{ingredient.text}</li> \r\n               })}\r\n           </ol>\r\n           <p>{calories}</p> \r\n           <img className={style.image} src={image} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe\r\n\r\n","import React,{useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nfunction App() {\n\n  const APP_ID = '24db878f';\n  const APP_KEY = \"8f2be69a71c33ec80095fadb5dbed756\";\n  \n const [menu , setMenu] = useState([]);\n const [search, setSearch] = useState('');\n const [query ,setQuery] = useState('chicken');\n  \n  const getRequest = async () => {\n     const  response = await fetch( `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n     const data = await response.json();\n     setMenu(data.hits);\n     \n\n\n  }\n    \n  \n  \n useEffect(()=> {\n\n  getRequest();\n\n  },[query]);  \n  \n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n  return (\n    <div className=\"App\">\n    <form   onSubmit={getSearch} className=\"search-form\">\n      <input className=\"search-bar\" type=\"text\" value={search} onChange={(e)=>setSearch(e.target.value)}/>\n      <button className=\"search-button\" type=\"submit\">Search</button>\n    </form>\n     <div className=\"container\">\n    {menu.map((recipe) => {\n      return <Recipe key={recipe.recipe.label} title={recipe.recipe.label}  calories={recipe.recipe.calories} image={recipe.recipe.image}\n      ingredients={recipe.recipe.ingredients}\n      />\n    })}\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__29FAz\",\"image\":\"recipe_image__1uKUz\"};"],"sourceRoot":""}